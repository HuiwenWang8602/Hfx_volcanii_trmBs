dds$genotype <- relevel(dds$genotype, ref = "WT")
dds <- estimateSizeFactors(dds)
ddsDE <- DESeq(dds)
resultsNames(ddsDE)
res_a0150 <- results(ddsDE, contrast = list("genotype_hvo_a0150_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
res_2035 <- results(ddsDE, contrast = list("genotype_hvo_2035_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
plotMA(res_2035)
plotMA(res_a0150)
library(tidyverse)
library(purrr)
library(ggpubr)
library(viridis)
library(pheatmap)
library(rrcov)
library(DESeq2)
library(RColorBrewer)
library(GenomicFeatures)
library(GenomicRanges)
library(rtracklayer)
trmB1 <- read.csv("2035_trmB_counts_1.csv", sep = "", col.names = c("gene", "hvo_2035_1"), header = FALSE)
trmB2 <- read.csv("2035_trmB_counts_2.csv", sep = "", col.names = c("gene", "hvo_2035_2"), header = FALSE)
trmB3 <- read.csv("2035_trmB_counts_3.csv", sep = "", col.names = c("gene", "hvo_2035_3"), header = FALSE)
trmB4 <- read.csv("a0150_trmB_counts_1.csv", sep = "", col.names = c("gene", "hvo_a0150_1"), header = FALSE)
trmB5 <- read.csv("a0150_trmB_counts_2.csv", sep = "", col.names = c("gene", "hvo_a0150_2"), header = FALSE)
trmB6 <- read.csv("a0150_trmB_counts_3.csv", sep = "", col.names = c("gene", "hvo_a0150_3"), header = FALSE)
WT1 <- read.csv("pyrE2_1.csv", sep = "", col.names = c("gene", "pyrE2_1"), header = FALSE)
WT2 <- read.csv("pyrE2_2.csv", sep = "", col.names = c("gene", "pyrE2_2"), header = FALSE)
WT3 <- read.csv("pyrE2_3.csv", sep = "", col.names = c("gene", "pyrE2_3"), header = FALSE)
arcogs <- read.csv("arcogs-14-18.hvo.txt", sep = "")
df_list <- list(WT1, WT2, WT3, trmB1, trmB2, trmB3, trmB4, trmB5, trmB6)
df <- df_list |> purrr::reduce(full_join, by="gene")
counts_data <- head(df,-5)
cts <- as.matrix(counts_data[-1])
rownames(cts) <- counts_data$gene
counts_col <- data.frame(factor(c("WT", "WT", "WT", "hvo_2035", "hvo_2035", "hvo_2035", "hvo_a0150", "hvo_a0150", "hvo_a0150")))
colnames(counts_col) <- c("genotype")
row.names(counts_col) <- colnames(counts_data)[-c(1)]
all(rownames(counts_col) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = counts_col,
design = ~ genotype)
# Pre-filtering low count genes
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
# Assigning baseline genotype (WT)
dds$genotype <- relevel(dds$genotype, ref = "WT")
dds <- estimateSizeFactors(dds)
ddsDE <- DESeq(dds)
resultsNames(ddsDE)
res_a0150 <- results(ddsDE, contrast = list("genotype_hvo_a0150_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
res_2035 <- results(ddsDE, contrast = list("genotype_hvo_2035_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
plotMA(res_2035)
plotMA(res_a0150)
resLFC_2035 <- lfcShrink(ddsDE, coef="genotype_hvo_2035_vs_WT", type="apeglm", lfcThreshold = 1)
resLFC_a0150 <- lfcShrink(ddsDE, coef="genotype_hvo_a0150_vs_WT", type="apeglm", lfcThreshold = 1)
drawLines <- function() abline(h=c(-1,1),col="dodgerblue",lwd=2)
# plotMA(res, ylim=c(-2.5,2.5)); drawLines()
plotMA(resLFC_2035, ylim=c(-2.5,2.5)); drawLines();
plotMA(resLFC_a0150, ylim=c(-2.5,2.5)); drawLines();
d <- plotCounts(dds, gene=which.min(res_a0150$padj), intgroup="genotype",
returnData=TRUE)
ggplot(d, aes(x=genotype, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
vsd <- vst(ddsDE, blind=FALSE)
# rld <- rlog(ddsDE, blind=FALSE)
# ntd <- normTransform(ddsDE)
# library("vsn")
# meanSdPlot(assay(ntd))
# meanSdPlot(assay(vsd))
# meanSdPlot(assay(rld))
# PCA with variance stabilizing transformation
plotPCA(vsd, intgroup = c("genotype"))
pcaData <- plotPCA(vsd, intgroup=c("genotype"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=genotype)) +
geom_point(size=3) +
ggtitle("PCA of samples") +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
# Plot PCA by column variable
plotPCA(vsd, intgroup = "genotype", ntop = 500) +
theme_bw() + # remove default ggplot2 theme
geom_point(size = 5) + # Increase point size
# scale_y_continuous(limits = c(-5, 5)) + # change limits to fix figure dimensions
ggtitle(label = "Principal Component Analysis (PCA)",
subtitle = "Top 500 most variable genes")
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
colnames(sampleDistMatrix) <- paste(vsd$genotype, sep = "-")
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
# Heatmap
pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors)
# res_2035 <- results(ddsDE, name = "genotype_2035_trmB_vs_WT",
#                      cooksCutoff = FALSE, independentFiltering = FALSE,
#                      lfcThreshold = 1, alpha = 0.01)
table_a0150 <- res_a0150 %>% # Make a result table
data.frame() %>%
rownames_to_column(var = "locus_tag") %>%
as_tibble()
tmp <- arcogs[c(1, 11, 12, 18)]
table_a0150 <- left_join(table_a0150, tmp, by="locus_tag")
table_a0150_sig <- table_a0150 %>%
filter(padj < 0.01) %>%
filter(abs(log2FoldChange) >= 1)
# write_csv(table_a0150, "data/a0150.csv")
table_2035 <- res_2035 %>% # Make a result table
data.frame() %>%
rownames_to_column(var = "locus_tag") %>%
as_tibble()
table_2035 <- left_join(table_2035, tmp, by="locus_tag")
table_2035_sig <- table_2035 %>%
filter(padj < 0.01) %>%
filter(abs(log2FoldChange) >= 1)
# write_csv(table_2035, "data/2035.csv")
sum(res_a0150$padj < 0.01, na.rm=TRUE)
sum(res_2035$padj < 0.01, na.rm=TRUE)
table_2035 <- table_2035 %>%
mutate(threshold_sig = padj < 0.01)
ggplot(table_2035) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) +
ggtitle("Interaction of hvo_2035 and glucose") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim(0, 50) +
xlim(-5,5)
filter(table_2035_sig, log2FoldChange >= 1)
filter(table_2035_sig, log2FoldChange <= -1)
table_a0150 <- table_a0150 %>%
mutate(threshold_sig = padj < 0.01)
ggplot(table_a0150) +
geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) +
ggtitle("Interaction of hvo_a0150 and glucose") +
xlab("log2 fold change") +
ylab("-log10 adjusted p-value") +
ylim(0, 50) +
xlim(-3,3)
filter(table_a0150_sig, log2FoldChange >= 1)
filter(table_a0150_sig, log2FoldChange <= -1)
# Calculate statistical information about the cogs represented in the list of genes using the function below.
# Cogtest: three inputs to this function:
# 1) list of gene names from the cluster (namelist)
# 2) COG file
# 3) p-value cutoff
# 4) method for multiple testing correction
cogtest <- function(namelist, cogfile, pvalue, method = "fdr", cutoff = 5) {
cogs <- subset(cogfile, is.element(cogfile$locus_tag, unique(namelist$locus_tag)) == TRUE)
clust <- table(cogs$funclass_name)
resm <- matrix(0, length(clust), 4) # create 0 matrix
res <- data.frame(resm) # make 0 df
rownames(res) <- names(clust)
colnames(res) <- c("probability", "expect", "count", "p_adjust")
all <- table(cogfile$funclass_name)
for (i in 1:length(clust)) { # calc expected frequencies and pval by hypergeo and append to DF
res[i, 1] <- phyper(clust[i], all[i], sum(all) - all[i], nrow(cogs), lower.tail = F)
res[i, 2] <- all[i] * (nrow(cogs) / sum(all))
res[i, 3] <- clust[i]
}
# multiple testing correction:
res$p_adjust <- signif(p.adjust(res$probability, method = method), digits = 4)
res$probability <- signif(res$probability, digits = 4)
fin <- subset(res, p_adjust <= pvalue & count >= cutoff)
# fin <- subset(res) # put this on if want to see all
fin <- cbind("COG" = rownames(fin), fin, stringsAsFactors = F)
row.names(fin) <- NULL
return(fin)
}
cog_2035 <- cogtest(table_2035_sig, arcogs, 0.05, cutoff = 5)
cog_2035 <- cog_2035 %>%
mutate(strain = "hvo_2035") %>%
relocate(strain, .before = "COG")
cog_a0150 <- cogtest(table_a0150_sig, arcogs, 0.05, cutoff = 5)
cog_a0150 <- cog_a0150 %>%
mutate(strain = "hvo_a0150") %>%
relocate(strain, .before = "COG")
total_cog <- rbind(cog_2035, cog_a0150)
total_cog
write.csv(total_cog, "cogtest_results.csv")
overlap <- inner_join(table_2035_sig[1], table_a0150_sig[1], by = "locus_tag")
overlap <- unique(overlap)
tmp <- arcogs[c(1,18)]
overlap <- inner_join(overlap, tmp, by="locus_tag")
overlap
cogtest(overlap, arcogs, 0.05, cutoff = 5)
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 30)
mat <- assay(vsd)[ topVarGenes, ]
mat <- mat - rowMeans(mat)
anno <- as.data.frame(mat)
anno$locus_tag <- rownames(anno)
anno <- left_join(anno, arcogs[c(1, 11)], by = "locus_tag")
anno <- anno %>%
mutate(name = ifelse(Gene == "-" | is.na(Gene), locus_tag, Gene))
anno$name <- sub('[.]', '_', make.names(anno$name, unique=TRUE))
rownames(anno) <- anno$name
anno <- anno[-c(10,11,12)]
mat <- as.matrix(anno)
pheatmap(mat, cluster_rows = T, cluster_columns = F, column_labels = colnames(anno))
order(rowVars(assay(vsd))
decreasing = TRUE
rowVars(assay(vsd))
View(arcogs)
arcogs <- read.csv("arcogs-14-18.hvo.txt", sep = "")
counts_data <- read_csv("00_combined_data_out.csv")
counts_col <- read_csv("00_combined_meta_out.csv")
counts_col <- counts_col |>
filter(
(genotype == "trmB" | genotype == "WT")  &
glucose == "pGlu" &
batch == "RH_S1_2021"
)
rownames = counts_col$rowname
counts_col <- counts_col[c(3)]
rownames(counts_col) <- rownames
cts <- subset(counts_data, select = c(trmB_a_glu_S4, trmB_c_glu_S34, WT_a_glu_S39, WT_c_glu_S18, WT_d_glu_S19))
cts <- as.matrix(cts)
rownames(cts) <- counts_data$...1
# colnames(counts_col) <- c("genotype")
# row.names(counts_col) <- colnames(counts_data)[-c(1)]
all(rownames(counts_col) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = counts_col,
design = ~ genotype)
# Pre-filtering low count genes
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
# Assigning baseline genotype (WT)
dds$genotype <- relevel(dds$genotype, ref = "WT")
dds <- estimateSizeFactors(dds)
ddsDE <- DESeq(dds)
resultsNames(ddsDE)
res <- results(ddsDE, contrast = list("genotype_trmB_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
resLFC <- lfcShrink(ddsDE, coef="genotype_trmB_vs_WT", type="apeglm", lfcThreshold = 1)
drawLines <- function() abline(h=c(-1,1),col="dodgerblue",lwd=2)
# plotMA(res, ylim=c(-2.5,2.5)); drawLines()
plotMA(resLFC_2035, ylim=c(-2.5,2.5)); drawLines();
library(tidyverse)
library(purrr)
library(ggpubr)
library(viridis)
library(pheatmap)
library(rrcov)
library(DESeq2)
library(RColorBrewer)
library(GenomicFeatures)
library(GenomicRanges)
library(rtracklayer)
arcogs <- read.csv("arcogs-14-18.hvo.txt", sep = "")
counts_data <- read_csv("00_combined_data_out.csv")
counts_col <- read_csv("00_combined_meta_out.csv")
counts_col <- counts_col |>
filter(
(genotype == "trmB" | genotype == "WT")  &
glucose == "pGlu" &
batch == "RH_S1_2021"
)
rownames = counts_col$rowname
counts_col <- counts_col[c(3)]
rownames(counts_col) <- rownames
cts <- subset(counts_data, select = c(trmB_a_glu_S4, trmB_c_glu_S34, WT_a_glu_S39, WT_c_glu_S18, WT_d_glu_S19))
cts <- as.matrix(cts)
rownames(cts) <- counts_data$...1
# colnames(counts_col) <- c("genotype")
# row.names(counts_col) <- colnames(counts_data)[-c(1)]
all(rownames(counts_col) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = counts_col,
design = ~ genotype)
# Pre-filtering low count genes
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
# Assigning baseline genotype (WT)
dds$genotype <- relevel(dds$genotype, ref = "WT")
dds <- estimateSizeFactors(dds)
ddsDE <- DESeq(dds)
resultsNames(ddsDE)
res <- results(ddsDE, contrast = list("genotype_trmB_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
# resLFC <- lfcShrink(ddsDE, coef="genotype_trmB_vs_WT", type="apeglm", lfcThreshold = 1)
#
#
# drawLines <- function() abline(h=c(-1,1),col="dodgerblue",lwd=2)
#
# # plotMA(res, ylim=c(-2.5,2.5)); drawLines()
# plotMA(resLFC_2035, ylim=c(-2.5,2.5)); drawLines();
# plotMA(resLFC_a0150, ylim=c(-2.5,2.5)); drawLines();
d <- plotCounts(dds, gene=which.min(res_a0150$padj), intgroup="genotype",
returnData=TRUE)
library(tidyverse)
library(purrr)
library(ggpubr)
library(viridis)
library(pheatmap)
library(rrcov)
library(DESeq2)
library(RColorBrewer)
library(GenomicFeatures)
library(GenomicRanges)
library(rtracklayer)
arcogs <- read.csv("arcogs-14-18.hvo.txt", sep = "")
counts_data <- read_csv("00_combined_data_out.csv")
counts_col <- read_csv("00_combined_meta_out.csv")
counts_col <- counts_col |>
filter(
(genotype == "trmB" | genotype == "WT")  &
glucose == "pGlu" &
batch == "RH_S1_2021"
)
rownames = counts_col$rowname
counts_col <- counts_col[c(3)]
rownames(counts_col) <- rownames
cts <- subset(counts_data, select = c(trmB_a_glu_S4, trmB_c_glu_S34, WT_a_glu_S39, WT_c_glu_S18, WT_d_glu_S19))
cts <- as.matrix(cts)
rownames(cts) <- counts_data$...1
# colnames(counts_col) <- c("genotype")
# row.names(counts_col) <- colnames(counts_data)[-c(1)]
all(rownames(counts_col) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = counts_col,
design = ~ genotype)
# Pre-filtering low count genes
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
# Assigning baseline genotype (WT)
dds$genotype <- relevel(dds$genotype, ref = "WT")
dds <- estimateSizeFactors(dds)
ddsDE <- DESeq(dds)
resultsNames(ddsDE)
res <- results(ddsDE, contrast = list("genotype_trmB_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
# resLFC <- lfcShrink(ddsDE, coef="genotype_trmB_vs_WT", type="apeglm", lfcThreshold = 1)
#
#
# drawLines <- function() abline(h=c(-1,1),col="dodgerblue",lwd=2)
#
# # plotMA(res, ylim=c(-2.5,2.5)); drawLines()
# plotMA(resLFC_2035, ylim=c(-2.5,2.5)); drawLines();
# plotMA(resLFC_a0150, ylim=c(-2.5,2.5)); drawLines();
d <- plotCounts(dds, gene=which.min(res$padj), intgroup="genotype",
returnData=TRUE)
ggplot(d, aes(x=genotype, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
vsd <- vst(ddsDE, blind=FALSE)
# rld <- rlog(ddsDE, blind=FALSE)
# ntd <- normTransform(ddsDE)
library("vsn")
# meanSdPlot(assay(ntd))
meanSdPlot(assay(vsd))
# meanSdPlot(assay(rld))
# PCA with variance stabilizing transformation
plotPCA(vsd, intgroup = c("genotype"))
# Plot PCA by column variable
plotPCA(vsd, intgroup = "genotype", ntop = 500) +
theme_bw() + # remove default ggplot2 theme
geom_point(size = 5) + # Increase point size
# scale_y_continuous(limits = c(-5, 5)) + # change limits to fix figure dimensions
ggtitle(label = "Principal Component Analysis (PCA)",
subtitle = "Top 500 most variable genes")
summary(res)
# res_2035 <- results(ddsDE, name = "genotype_2035_trmB_vs_WT",
#                      cooksCutoff = FALSE, independentFiltering = FALSE,
#                      lfcThreshold = 1, alpha = 0.01)
res_tabl <- res %>% # Make a result table
data.frame() %>%
rownames_to_column(var = "locus_tag") %>%
as_tibble()
tmp <- arcogs[c(1, 11, 12, 18)]
res_tabl <- left_join(res_tabl, tmp, by="locus_tag")
res_sig <- res_tabl %>%
filter(padj < 0.01) %>%
filter(abs(log2FoldChange) >= 1)
# write_csv(table_a0150, "data/a0150.csv")
View(res_tabl)
View(res_sig)
library(tidyverse)
library(purrr)
library(ggpubr)
library(viridis)
library(pheatmap)
library(rrcov)
library(DESeq2)
library(RColorBrewer)
library(GenomicFeatures)
library(GenomicRanges)
library(rtracklayer)
trmB1 <- read.csv("2035_trmB_counts_1.csv", sep = "", col.names = c("gene", "hvo_2035_1"), header = FALSE)
trmB2 <- read.csv("2035_trmB_counts_2.csv", sep = "", col.names = c("gene", "hvo_2035_2"), header = FALSE)
trmB3 <- read.csv("2035_trmB_counts_3.csv", sep = "", col.names = c("gene", "hvo_2035_3"), header = FALSE)
trmB4 <- read.csv("a0150_trmB_counts_1.csv", sep = "", col.names = c("gene", "hvo_a0150_1"), header = FALSE)
trmB5 <- read.csv("a0150_trmB_counts_2.csv", sep = "", col.names = c("gene", "hvo_a0150_2"), header = FALSE)
trmB6 <- read.csv("a0150_trmB_counts_3.csv", sep = "", col.names = c("gene", "hvo_a0150_3"), header = FALSE)
WT1 <- read.csv("pyrE2_1.csv", sep = "", col.names = c("gene", "pyrE2_1"), header = FALSE)
WT2 <- read.csv("pyrE2_2.csv", sep = "", col.names = c("gene", "pyrE2_2"), header = FALSE)
WT3 <- read.csv("pyrE2_3.csv", sep = "", col.names = c("gene", "pyrE2_3"), header = FALSE)
arcogs <- read.csv("arcogs-14-18.hvo.txt", sep = "")
df_list <- list(WT1, WT2, WT3, trmB1, trmB2, trmB3, trmB4, trmB5, trmB6)
df <- df_list |> purrr::reduce(full_join, by="gene")
counts_data <- head(df,-5)
cts <- as.matrix(counts_data[-1])
rownames(cts) <- counts_data$gene
counts_col <- data.frame(factor(c("WT", "WT", "WT", "hvo_2035", "hvo_2035", "hvo_2035", "hvo_a0150", "hvo_a0150", "hvo_a0150")))
colnames(counts_col) <- c("genotype")
row.names(counts_col) <- colnames(counts_data)[-c(1)]
all(rownames(counts_col) == colnames(cts))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = counts_col,
design = ~ genotype)
# Pre-filtering low count genes
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]
# Assigning baseline genotype (WT)
dds$genotype <- relevel(dds$genotype, ref = "WT")
dds <- estimateSizeFactors(dds)
ddsDE <- DESeq(dds)
resultsNames(ddsDE)
res_a0150 <- results(ddsDE, contrast = list("genotype_hvo_a0150_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
res_2035 <- results(ddsDE, contrast = list("genotype_hvo_2035_vs_WT"),
lfcThreshold = 1, alpha = 0.01)
plotMA(res_2035)
plotMA(res_a0150)
resLFC_2035 <- lfcShrink(ddsDE, coef="genotype_hvo_2035_vs_WT", type="apeglm", lfcThreshold = 1)
resLFC_a0150 <- lfcShrink(ddsDE, coef="genotype_hvo_a0150_vs_WT", type="apeglm", lfcThreshold = 1)
drawLines <- function() abline(h=c(-1,1),col="dodgerblue",lwd=2)
# plotMA(res, ylim=c(-2.5,2.5)); drawLines()
plotMA(resLFC_2035, ylim=c(-2.5,2.5)); drawLines();
plotMA(resLFC_a0150, ylim=c(-2.5,2.5)); drawLines();
d <- plotCounts(dds, gene=which.min(res_a0150$padj), intgroup="genotype",
returnData=TRUE)
ggplot(d, aes(x=genotype, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
vsd <- vst(ddsDE, blind=FALSE)
# rld <- rlog(ddsDE, blind=FALSE)
# ntd <- normTransform(ddsDE)
# library("vsn")
# meanSdPlot(assay(ntd))
# meanSdPlot(assay(vsd))
# meanSdPlot(assay(rld))
# PCA with variance stabilizing transformation
plotPCA(vsd, intgroup = c("genotype"))
pcaData <- plotPCA(vsd, intgroup=c("genotype"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=genotype)) +
geom_point(size=3) +
ggtitle("PCA of samples") +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()
# Plot PCA by column variable
plotPCA(vsd, intgroup = "genotype", ntop = 500) +
theme_bw() + # remove default ggplot2 theme
geom_point(size = 5) + # Increase point size
# scale_y_continuous(limits = c(-5, 5)) + # change limits to fix figure dimensions
ggtitle(label = "Principal Component Analysis (PCA)",
subtitle = "Top 500 most variable genes")
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
colnames(sampleDistMatrix) <- paste(vsd$genotype, sep = "-")
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
# Heatmap
pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors)
# res_2035 <- results(ddsDE, name = "genotype_2035_trmB_vs_WT",
#                      cooksCutoff = FALSE, independentFiltering = FALSE,
#                      lfcThreshold = 1, alpha = 0.01)
table_a0150 <- res_a0150 %>% # Make a result table
data.frame() %>%
rownames_to_column(var = "locus_tag") %>%
as_tibble()
tmp <- arcogs[c(1, 11, 12, 18)]
table_a0150 <- left_join(table_a0150, tmp, by="locus_tag")
table_a0150_sig <- table_a0150 %>%
filter(padj < 0.01) %>%
filter(abs(log2FoldChange) >= 1)
# write_csv(table_a0150, "data/a0150.csv")
table_2035 <- res_2035 %>% # Make a result table
data.frame() %>%
rownames_to_column(var = "locus_tag") %>%
as_tibble()
table_2035 <- left_join(table_2035, tmp, by="locus_tag")
table_2035_sig <- table_2035 %>%
filter(padj < 0.01) %>%
filter(abs(log2FoldChange) >= 1)
# write_csv(table_2035, "data/2035.csv")
View(table_a0150_sig)
View(arcogs)
View(table_2035_sig)
View(table_a0150_sig)
View(table_a0150)
View(counts_data)
d <- plotCounts(dds, gene=which.min(res_a0150$padj), intgroup="genotype",
returnData=TRUE)
ggplot(d, aes(x=genotype, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
View(table_a0150_sig)
View(table_2035)
View(table_a0150_sig)
View(table_a0150)
View(counts_data)
View(table_a0150_sig)
