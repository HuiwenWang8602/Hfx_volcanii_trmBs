```{r, message=F}
library(tidyverse)
library(purrr)
library(ggpubr)
library(viridis)
library(pheatmap)
library(rrcov)
library(DESeq2)
library(RColorBrewer)
library(GenomicFeatures)
library(GenomicRanges)
library(rtracklayer)
```

# Reading in CSV files and creating count matrix and metadata
```{r} 
trmB1 <- read.csv("hvo_1272_1.count", sep = "", col.names = c("gene", "hvo_0568_1"), header = FALSE)
trmB2 <- read.csv("hvo_1272_2.count", sep = "", col.names = c("gene", "hvo_0568_2"), header = FALSE)
trmB3 <- read.csv("hvo_1272_3.count", sep = "", col.names = c("gene", "hvo_0568_3"), header = FALSE)
trmB4 <- read.csv("hvo_0568_1.count", sep = "", col.names = c("gene", "hvo_1272_1"), header = FALSE)
trmB5 <- read.csv("hvo_0568_2.count", sep = "", col.names = c("gene", "hvo_1272_2"), header = FALSE)
trmB6 <- read.csv("hvo_0568_3.count", sep = "", col.names = c("gene", "hvo_1272_3"), header = FALSE)
WT1 <- read.csv("pyrE2_1.csv", sep = "", col.names = c("gene", "pyrE2_1"), header = FALSE)
WT2 <- read.csv("pyrE2_2.csv", sep = "", col.names = c("gene", "pyrE2_2"), header = FALSE)
WT3 <- read.csv("pyrE2_3.csv", sep = "", col.names = c("gene", "pyrE2_3"), header = FALSE)

arcogs <- read.csv("arcogs-14-18.hvo.txt", sep = "")

genelocus <- arcogs[c(1, 11)]
colnames(genelocus) = c("locus_tag", "gene")
genelocus <- genelocus |>
  mutate(
    gene = str_to_title(gene)
  )
```

```{r}
df_list <- list(WT1, WT2, WT3, trmB1, trmB2, trmB3, trmB4, trmB5, trmB6)
df <- df_list %>% purrr::reduce(left_join, by="gene")
df <- na.omit(df)

# df <- df[!duplicated(df), ]
counts_data <- head(df,-5)
cts <- as.matrix(counts_data[-1])
rownames(cts) <- counts_data$gene
colnames(cts) = c("pyrE2_A", "pyrE2_B", "pyrE2_C", "trmB2_A", "trmB2_B", "trmB2_C", "trmB3_A", "trmB3_B", "trmB3_C")

counts_col <- data.frame(factor(c("WT", "WT", "WT", "trmB2", "trmB2", "trmB2", "trmB3", "trmB3", "trmB3")))
colnames(counts_col) <- c("genotype")
row.names(counts_col) <- colnames(cts)

all(rownames(counts_col) == colnames(cts))
```

```{r}
dds <- DESeqDataSetFromMatrix(countData = cts,
                              colData = counts_col,
                              design = ~ genotype)

# Pre-filtering low count genes
smallestGroupSize <- 3
keep <- rowSums(counts(dds) >= 10) >= smallestGroupSize
dds <- dds[keep,]

# Assigning baseline genotype (WT)
dds$genotype <- relevel(dds$genotype, ref = "WT")

dds <- estimateSizeFactors(dds)

ddsDE <- DESeq(dds)
resultsNames(ddsDE)

res_0568 <- results(ddsDE, contrast = list("genotype_trmB2_vs_WT"),
                     lfcThreshold = 1, alpha = 0.01)

res_1272 <- results(ddsDE, contrast = list("genotype_trmB3_vs_WT"),
                     lfcThreshold = 1, alpha = 0.01)

plotMA(res_1272)

plotMA(res_0568)

```
# MA Plot
```{r}
resLFC_1272 <- lfcShrink(ddsDE, coef="genotype_trmB3_vs_WT", type="apeglm", lfcThreshold = 1)

resLFC_0568 <- lfcShrink(ddsDE, coef="genotype_trmB2_vs_WT", type="apeglm", lfcThreshold = 1)


drawLines <- function() abline(h=c(-1,1),col="dodgerblue",lwd=2)

# plotMA(res, ylim=c(-2.5,2.5)); drawLines()
plotMA(resLFC_1272, ylim=c(-2.5,2.5)); drawLines();
plotMA(resLFC_0568, ylim=c(-2.5,2.5)); drawLines();
```
# Plot Counts
```{r}
d <- plotCounts(dds, gene=which.min(res_0568$padj), intgroup="genotype", 
                returnData=TRUE)

ggplot(d, aes(x=genotype, y=count)) + 
  geom_point(position=position_jitter(w=0.1,h=0)) + 
  scale_y_log10(breaks=c(25,100,400))
```

# Transformations
```{r}
vsd <- vst(ddsDE, blind=FALSE)
# rld <- rlog(ddsDE, blind=FALSE)
# ntd <- normTransform(ddsDE)

# library("vsn")

# meanSdPlot(assay(ntd))
# meanSdPlot(assay(vsd))
# meanSdPlot(assay(rld))
```

# PCA
```{r}
# PCA with variance stabilizing transformation
plotPCA(vsd, intgroup = c("genotype"))

pcaData <- plotPCA(vsd, intgroup=c("genotype"), returnData=TRUE)
percentVar <- round(100 * attr(pcaData, "percentVar"))
ggplot(pcaData, aes(PC1, PC2, color=genotype)) +
  geom_point(size=3) +
  theme_bw() + 
  ggtitle(label = "Principal Component Analaysis (PCA)",
          subtitle = "pyrE2, trmB2, and trmB3") +
  xlab(paste0("PC1: ",percentVar[1],"% variance")) +
  ylab(paste0("PC2: ",percentVar[2],"% variance")) + 
  coord_fixed()

# Plot PCA by column variable
# plotPCA(vsd, intgroup = "genotype", ntop = 500) +
#   theme_bw() + # remove default ggplot2 theme
#   geom_point(size = 5) + # Increase point size
#   # scale_y_continuous(limits = c(-5, 5)) + # change limits to fix figure dimensions
#   ggtitle(label = "Principal Component Analysis (PCA)", 
#           subtitle = "Top 500 most variable genes") 
```

# Heatmap of sample-to-sample distance
```{r}
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
colnames(sampleDistMatrix) <- paste(vsd$genotype, sep = "-")
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)

# Heatmap
pheatmap(sampleDistMatrix, clustering_distance_rows = sampleDists, clustering_distance_cols = sampleDists, col = colors, main = "Heatmap of sample-to-sample distances (pyrE2, trmB2, trmB3)")
```

# Tables
```{r}
# res_1272 <- results(ddsDE, name = "genotype_1272_trmB_vs_WT",
#                      cooksCutoff = FALSE, independentFiltering = FALSE,
#                      lfcThreshold = 1, alpha = 0.01)

table_0568 <- res_0568 %>% # Make a result table
  data.frame() %>%
  rownames_to_column(var = "locus_tag") %>%
  as_tibble()

tmp <- arcogs[c(1, 11, 12, 18)]

table_0568 <- left_join(table_0568, tmp, by="locus_tag")

table_0568_sig <- table_0568 %>%
  filter(padj < 0.01) %>%
  filter(abs(log2FoldChange) >= 1)

# write_csv(table_0568, "data/0568.csv")

table_1272 <- res_1272 %>% # Make a result table
  data.frame() %>%
  rownames_to_column(var = "locus_tag") %>%
  as_tibble()

table_1272 <- left_join(table_1272, tmp, by="locus_tag")

table_1272_sig <- table_1272 %>%
  filter(padj < 0.01) %>%
  filter(abs(log2FoldChange) >= 1)

# write_csv(table_1272, "data/1272.csv")
```

# How many differentially expressed genes are there?
```{r}
sum(res_0568$padj < 0.01, na.rm=TRUE)
sum(res_1272$padj < 0.01, na.rm=TRUE)
```

# Volcano plot -- 1272_trmB
```{r}
table_1272 <- table_1272 %>%
  mutate(threshold_sig = padj < 0.01)

na.omit(table_1272) |>
ggplot() +
  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) +
  ggtitle("Differentially expressed genes between trmB3 and pyrE2") +
  theme_bw() + 
  xlab("log2 fold change") +
  ylab("-log10 adjusted p-value") +
  ylim(0, 50) + 
  xlim(-5,5) +
  guides(color = guide_legend(title = "Is this significant?"))

filter(table_1272_sig, log2FoldChange >= 1)
filter(table_1272_sig, log2FoldChange <= -1)
```

# Volcano plot -- 0568_trmB
```{r}
table_0568 <- table_0568 %>%
  mutate(threshold_sig = padj < 0.01)

na.omit(table_0568) |>
ggplot() +
  geom_point(aes(x = log2FoldChange, y = -log10(padj), colour = threshold_sig)) +
  ggtitle("Differentially expressed genes between trmB2 and pyrE2") +
  theme_bw() + 
  xlab("log2 fold change") +
  ylab("-log10 adjusted p-value") +
  ylim(0, 50) + 
  xlim(-3,3) +
  guides(color = guide_legend(title = "Is this significant?"))

filter(table_0568_sig, log2FoldChange >= 1)
filter(table_0568_sig, log2FoldChange <= -1)
```

# Cog-test
```{r}
# Calculate statistical information about the cogs represented in the list of genes using the function below.
# Cogtest: three inputs to this function:
# 1) list of gene names from the cluster (namelist)
# 2) COG file
# 3) p-value cutoff
# 4) method for multiple testing correction
cogtest <- function(namelist, cogfile, pvalue, method = "fdr", cutoff = 5) {
  cogs <- subset(cogfile, is.element(cogfile$locus_tag, unique(namelist$locus_tag)) == TRUE)
  clust <- table(cogs$funclass_name)
  resm <- matrix(0, length(clust), 4) # create 0 matrix
  res <- data.frame(resm) # make 0 df
  rownames(res) <- names(clust)
  colnames(res) <- c("probability", "expect", "count", "p_adjust")
  all <- table(cogfile$funclass_name)
  for (i in 1:length(clust)) { # calc expected frequencies and pval by hypergeo and append to DF
    res[i, 1] <- phyper(clust[i], all[i], sum(all) - all[i], nrow(cogs), lower.tail = F)
    res[i, 2] <- all[i] * (nrow(cogs) / sum(all))
    res[i, 3] <- clust[i]
  }
  # multiple testing correction:
  res$p_adjust <- signif(p.adjust(res$probability, method = method), digits = 4)
  res$probability <- signif(res$probability, digits = 4)

  fin <- subset(res, p_adjust <= pvalue & count >= cutoff)
  # fin <- subset(res) # put this on if want to see all
  fin <- cbind("COG" = rownames(fin), fin, stringsAsFactors = F)
  row.names(fin) <- NULL
  return(fin)
}

cog_1272 <- cogtest(table_1272_sig, arcogs, 0.05, cutoff = 5)
cog_1272 <- cog_1272 %>%
  mutate(strain = "hvo_1272") %>%
  relocate(strain, .before = "COG")
cog_0568 <- cogtest(table_0568_sig, arcogs, 0.05, cutoff = 5)
cog_0568 <- cog_0568 %>%
  mutate(strain = "hvo_0568") %>%
  relocate(strain, .before = "COG")

total_cog <- rbind(cog_1272, cog_0568)
total_cog
write.csv(total_cog, "cogtest_results2.csv")

overlap <- inner_join(table_1272_sig[1], table_0568_sig[1], by = "locus_tag")
overlap <- unique(overlap)

tmp <- arcogs[c(1,18)]
overlap <- inner_join(overlap, tmp, by="locus_tag")
overlap

cogtest(overlap, arcogs, 0.05, cutoff = 5)
```

# Heatmap
```{r}
topVarGenes <- head(order(rowVars(assay(vsd)), decreasing = TRUE), 30)

mat <- assay(vsd)[ topVarGenes, ] 
mat <- mat - rowMeans(mat) 
anno <- as.data.frame(mat)
anno$locus_tag <- rownames(anno)

anno <- left_join(anno, arcogs[c(1, 11)], by = "locus_tag")

anno <- anno %>%
  mutate(name = ifelse(Gene == "-" | is.na(Gene), locus_tag, Gene))
anno$name <- sub('[.]', '_', make.names(anno$name, unique=TRUE))

rownames(anno) <- anno$name
anno <- anno[-c(10,11,12)]
mat <- as.matrix(anno)

pheatmap(mat, cluster_rows = T, cluster_columns = F, column_labels = colnames(anno), main = "Heatmap of 30 genes with most variance between trmB2, trmB3, and pyrE2", legend_labels = "difference from mean")
```



# Heatmap 1272
```{r}
# varGenes1272 <- table_1272_sig$locus_tag
# mat <- assay(vsd)[ varGenes1272, ] 
# mat <- mat - rowMeans(mat) 
# anno <- as.data.frame(mat)
# anno$locus_tag <- rownames(anno)
# 
# anno <- left_join(anno, arcogs[c(1, 11)], by = "locus_tag")
# 
# anno <- anno %>%
#   mutate(name = ifelse(Gene == "-" | is.na(Gene), locus_tag, Gene))
# anno$name <- sub('[.]', '_', make.names(anno$name, unique=TRUE))
# 
# rownames(anno) <- anno$name
# anno <- anno[-c(10,11,12)]
# mat <- as.matrix(anno)
# 
# pheatmap(mat, cluster_rows = T, cluster_columns = F, column_labels = colnames(anno))
```

```{r}
library(clusterProfiler)

# data(table_0568_sig$locus_tag)
gene_list <- 
head(table_0568_sig)
# library(org.Mm.eg.db)
# 
# search_kegg_organism('hvo', by='kegg_code')
# 
# table_1272_sig$entrez <- mapIds(x = org.Mm.eg.db,
#                          keys = row.names(results),
#                          column = "ENTREZID",
#                          keytype = "SYMBOL",
#                          multiVals = "first")
# 
# 
# gene_matrix <- table_0568_sig$log2FoldChange
# names(gene_matrix) <- 
# head(gene_matrix)

```

# ClusterProfiler
```{r}
# Write normalized gene counts to a .txt file
write.table(x = as.data.frame(counts(ddsDE), normalized = T), 
            file = 'data/normalized_counts.csv', 
            sep = '\t', 
            quote = F,
            col.names = NA)

# significant results 
write.table(x = counts(ddsDE[table_1272_sig$locus_tag], normalized = T), 
            file = 'data/normalized_counts_significant_1272.csv', 
            sep = '\t', 
            quote = F, 
            col.names = NA)

write.table(x = counts(ddsDE[table_0568_sig$locus_tag], normalized = T), 
            file = 'data/normalized_counts_significant_0568.csv', 
            sep = '\t', 
            quote = F, 
            col.names = NA)

# Write significant annotated results table to a .txt file
write.table(x = as.data.frame(res_1272), 
            file = "data/results_gene_annotated_significant.csv", 
            sep = '\t', 
            quote = F,
            col.names = NA)

# # Write the annotated results table to a .txt file
# write.table(x = as.data.frame(results), 
#             file = "data/results_gene_annotated.txt", 
#             sep = '\t', 
#             quote = F,
#             col.names = NA)
# 
# # Write significant annotated results table to a .txt file
# write.table(x = as.data.frame(results_sig), 
#             file = "data.results_gene_annotated_significant.txt", 
#             sep = '\t', 
#             quote = F,
#             col.names = NA)
```


```{r}
all_sig <- unique(inner_join(table_1272_sig, table_0568_sig, by = "locus_tag")) %>%
  mutate(
    avgLFC = (log2FoldChange.x + log2FoldChange.y)/2
  )
```